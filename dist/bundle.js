!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function s(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}function i(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var o;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(o||(o={}));class l{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class a extends class{constructor(){this.listners=[]}addListners(e){this.listners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new a),this.instance}addProject(e,t,n){const r=new l(Math.random().toString(),e,t,n,o.Active);this.projects.push(r),this.updateListners()}moveProject(e,t){const n=this.projects.find(t=>t.id===e);n&&n.status!==t&&(n.status=t,this.updateListners())}updateListners(){for(const e of this.listners)e(this.projects.slice())}}const c=a.getInstance();var u=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class d extends r{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.pepoleInputElement=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler.bind(this))}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=this.pepoleInputElement.value,r={value:t,required:!0,minLength:5},i={value:n,required:!0,minLength:1,min:1,max:5};return s({value:e,required:!0,minLength:1})&&s(r)&&s(i)?[e,t,+n]:void alert("Invalid input, please try agian..")}clearInput(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.pepoleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;c.addProject(e,n,r),this.clearInput()}}}u([i],d.prototype,"submitHandler",null);var p=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class h extends r{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 Person":this.project.people+" persons"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("DragEnd")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}p([i],h.prototype,"dragStartHandler",null);var f=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class m extends r{constructor(e){super("project-list","app",!1,e+"-projects"),this.type=e,this.assignedProject=[],this.configure(),this.renderContent()}dragOverHandler(e){if(e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]){e.preventDefault();this.element.querySelector("ul").classList.add("droppable")}}dropHandler(e){const t=e.dataTransfer.getData("text/plain");c.moveProject(t,"active"===this.type?o.Active:o.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),c.addListners(e=>{const t=e.filter(e=>"active"===this.type?e.status===o.Active:e.status===o.Finished);this.assignedProject=t,this.renderProjects()})}renderContent(){const e=this.type+"-projects-list";this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(this.type+"-projects-list").innerHTML="";for(const e of this.assignedProject)new h(this.element.querySelector("ul").id,e)}}f([i],m.prototype,"dragOverHandler",null),f([i],m.prototype,"dropHandler",null),f([i],m.prototype,"dragLeaveHandler",null);new d,new m("active"),new m("finished")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9iYXNlLWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC92YWxpZGF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9kZWNvcmF0b3IvYXV0b2JpbmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9wcm9qZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS9wcm9qZWN0LXN0YXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvcHJvamVjdC1pbnB1dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3Byb2plY3QtaXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3Byb2plY3QtbGlzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ29tcG9uZW50IiwidGVtcGxhdGVJZCIsImhvc3RFbGVtZW50SWQiLCJpbnNlcnRBdFN0YXJ0IiwibmV3RWxlbWVudElkIiwidGhpcyIsInRlbXBsYXRlRWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJob3N0RWxlbWVudCIsImltcG9ydE5vZGUiLCJjb250ZW50IiwiZWxlbWVudCIsImZpcnN0RWxlbWVudENoaWxkIiwiaWQiLCJhdHRhY2giLCJpbnNlcnRBdEJlZ2lubmluZyIsImluc2VydEFkamFjZW50RWxlbWVudCIsInZhbGlkYXRlIiwidmFsaWRhdGFibGVJbnB1dCIsImlzVmFsaWQiLCJyZXF1aXJlZCIsInRvU3RyaW5nIiwidHJpbSIsImxlbmd0aCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsImF1dG9iaW5kIiwiXyIsIl8yIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiY29uZmlndXJhYmxlIiwiUHJvamVjdFN0YXR1cyIsIlByb2plY3RUeXBlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInBlb3BsZSIsInN0YXR1cyIsImxpc3RuZXJzIiwibGlzdG5lcnNGbiIsInB1c2giLCJzdXBlciIsInByb2plY3RzIiwiaW5zdGFuY2UiLCJudW1QZW9wbGUiLCJuZXdQcm9qZWN0IiwiTWF0aCIsInJhbmRvbSIsIkFjdGl2ZSIsInVwZGF0ZUxpc3RuZXJzIiwicHJvamVjdElkIiwibmV3U3RhdHVzIiwicHJvamVjdCIsImZpbmQiLCJwcmoiLCJzbGljZSIsInByb2plY3RTdGF0ZSIsImdldEluc3RhbmNlIiwidGl0bGVJbnB1dEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQiLCJwZXBvbGVJbnB1dEVsZW1lbnQiLCJjb25maWd1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwic3VibWl0SGFuZGxlciIsImVudGVyVGl0bGUiLCJlbnRlckRlc2NyaXB0aW9uIiwiZW50ZXJQZW9wbGUiLCJkZXNjcmlwdGlvblZhbGlkYXRhYmxlIiwicGVvcGxlVmFsaWRhdGFibGUiLCJhbGVydCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ1c2VySW5wdXQiLCJnYXRoZXJVc2VySW5wdXQiLCJBcnJheSIsImlzQXJyYXkiLCJkZXNjcmlwIiwiYWRkUHJvamVjdCIsImNsZWFySW5wdXQiLCJob3N0SWQiLCJyZW5kZXJDb250ZW50IiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImVmZmVjdEFsbG93ZWQiLCJjb25zb2xlIiwibG9nIiwiZHJhZ1N0YXJ0SGFuZGxlciIsImRyYWdFbmRIYW5kbGVyIiwidGV4dENvbnRlbnQiLCJwZXJzb25zIiwidHlwZSIsImFzc2lnbmVkUHJvamVjdCIsInR5cGVzIiwiY2xhc3NMaXN0IiwiYWRkIiwicHJqSWQiLCJnZXREYXRhIiwibW92ZVByb2plY3QiLCJGaW5pc2hlZCIsInJlbW92ZSIsImRyYWdPdmVySGFuZGxlciIsImRyYWdMZWF2ZUhhbmRsZXIiLCJkcm9wSGFuZGxlciIsImFkZExpc3RuZXJzIiwicmVsZXZhbnRQcm9qZWN0IiwiZmlsdGVyIiwicmVuZGVyUHJvamVjdHMiLCJsaXN0SWQiLCJ0b1VwcGVyQ2FzZSIsImlubmVySFRNTCIsInByb2pJdGVtIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLHNDQ2hGOUMsTUFBZUMsRUFLbEIsWUFBWUMsRUFDUkMsRUFFQUMsRUFDQUMsR0FDQUMsS0FBS0MsZ0JBQXVDQyxTQUFTQyxlQUFlUCxHQUNwRUksS0FBS0ksWUFBY0YsU0FBU0MsZUFBZU4sR0FFM0MsTUFBTVEsRUFBYUgsU0FBU0csV0FBV0wsS0FBS0MsZ0JBQWdCSyxTQUFRLEdBQ3BFTixLQUFLTyxRQUFVRixFQUFXRyxrQkFDdkJULElBQ0NDLEtBQUtPLFFBQVFFLEdBQUtWLEdBRXRCQyxLQUFLVSxPQUFPWixHQUdSLE9BQU9hLEdBQ1hYLEtBQUtJLFlBQVlRLHNCQUFzQkQsRUFBa0IsYUFBYSxZQUFZWCxLQUFLTyxVQ2R4RixTQUFTTSxFQUFTQyxHQUNyQixJQUFJQyxHQUFVLEVBZ0JkLE9BZkdELEVBQWlCRSxXQUNoQkQsRUFBVUEsR0FBOEQsSUFBbkRELEVBQWlCbEMsTUFBTXFDLFdBQVdDLE9BQU9DLFFBRWpDLE1BQTlCTCxFQUFpQk0sV0FBc0QsaUJBQTFCTixFQUFpQmxDLFFBQzdEbUMsRUFBVUEsR0FBV0QsRUFBaUJsQyxNQUFNdUMsUUFBVUwsRUFBaUJNLFdBRTFDLE1BQTlCTixFQUFpQk8sV0FBc0QsaUJBQTFCUCxFQUFpQmxDLFFBQzdEbUMsRUFBVUEsR0FBV0QsRUFBaUJsQyxNQUFNdUMsUUFBVUwsRUFBaUJPLFdBRWpELE1BQXZCUCxFQUFpQlEsS0FBK0MsaUJBQTFCUixFQUFpQmxDLFFBQ3REbUMsRUFBVUEsR0FBV0QsRUFBaUJsQyxPQUFTa0MsRUFBaUJRLEtBRTFDLE1BQXZCUixFQUFpQlMsS0FBK0MsaUJBQTFCVCxFQUFpQmxDLFFBQ3REbUMsRUFBVUEsR0FBV0QsRUFBaUJsQyxPQUFTa0MsRUFBaUJTLEtBRTdEUixFQzFCSixTQUFTUyxFQUFTQyxFQUFNQyxFQUFVQyxHQUNyQyxNQUFNQyxFQUFpQkQsRUFBVy9DLE1BUWxDLE1BUDBDLENBQ3RDaUQsY0FBYyxFQUNkLE1BRUksT0FEZ0JELEVBQWV6QyxLQUFLYSxRQ0xoRCxJQUFZOEIsR0FBWixTQUFZQSxHQUFnQix1QkFBTywyQkFBbkMsQ0FBWUEsTUFBYSxLQUNsQixNQUFNQyxFQUNULFlBQW1CdEIsRUFDUnVCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBSlEsS0FBQTFCLEtBQ1IsS0FBQXVCLFFBQ0EsS0FBQUMsY0FDQSxLQUFBQyxTQUNBLEtBQUFDLFVDS04sTUFBTSxVQVBiLG9CQUNjLEtBQUFDLFNBQXlCLEdBQ25DLFlBQVlDLEdBQ1JyQyxLQUFLb0MsU0FBU0UsS0FBS0QsS0FRdkIsY0FDSUUsUUFISSxLQUFBQyxTQUEwQixHQUtsQyxxQkFDSSxPQUFHeEMsS0FBS3lDLFdBR1J6QyxLQUFLeUMsU0FBVyxJQUFJLEdBRlR6QyxLQUFLeUMsU0FNcEIsV0FBV1QsRUFBY0MsRUFBcUJTLEdBQzFDLE1BQU1DLEVBQWEsSUFBSVosRUFDbkJhLEtBQUtDLFNBQVM1QixXQUNkZSxFQUNBQyxFQUNBUyxFQUNBWixFQUFjZ0IsUUFFbEI5QyxLQUFLd0MsU0FBU0YsS0FBS0ssR0FDbkIzQyxLQUFLK0MsaUJBRVQsWUFBWUMsRUFBbUJDLEdBQzNCLE1BQU1DLEVBQVVsRCxLQUFLd0MsU0FBU1csS0FBS0MsR0FBTUEsRUFBSTNDLEtBQU91QyxHQUNqREUsR0FBV0EsRUFBUWYsU0FBV2MsSUFDN0JDLEVBQVFmLE9BQVNjLEVBQ2pCakQsS0FBSytDLGtCQUdMLGlCQUNKLElBQUksTUFBTVYsS0FBY3JDLEtBQUtvQyxTQUN6QkMsRUFBV3JDLEtBQUt3QyxTQUFTYSxVQUs5QixNQUFNQyxFQUFlLEVBQWFDLGMsMFVDL0NwQyxNQUFNLFVBQXFCNUQsRUFLOUIsY0FDSTRDLE1BQU0sZ0JBQWdCLE9BQU0sRUFBSyxjQUVqQ3ZDLEtBQUt3RCxrQkFBb0J4RCxLQUFLTyxRQUFRa0QsY0FBYyxVQUNwRHpELEtBQUswRCx3QkFBMEIxRCxLQUFLTyxRQUFRa0QsY0FBYyxnQkFDMUR6RCxLQUFLMkQsbUJBQXFCM0QsS0FBS08sUUFBUWtELGNBQWMsV0FDckR6RCxLQUFLNEQsWUFFVCxZQUNJNUQsS0FBS08sUUFBUXNELGlCQUFpQixTQUFTN0QsS0FBSzhELGNBQWMzRSxLQUFLYSxPQUVuRSxpQkFDUSxrQkFDSixNQUFNK0QsRUFBYS9ELEtBQUt3RCxrQkFBa0I1RSxNQUNwQ29GLEVBQW1CaEUsS0FBSzBELHdCQUF3QjlFLE1BQ2hEcUYsRUFBY2pFLEtBQUsyRCxtQkFBbUIvRSxNQU10Q3NGLEVBQXNDLENBQ3hDdEYsTUFBT29GLEVBQ1BoRCxVQUFVLEVBQ1ZJLFVBQVcsR0FHVCtDLEVBQWlDLENBQ25DdkYsTUFBUXFGLEVBQ1JqRCxVQUFVLEVBQ1ZJLFVBQVcsRUFDWEUsSUFBSyxFQUNMQyxJQUFLLEdBRVQsT0FDS1YsRUFuQmtDLENBQ25DakMsTUFBT21GLEVBQ1AvQyxVQUFVLEVBQ1ZJLFVBQVcsS0FpQlZQLEVBQVNxRCxJQUNUckQsRUFBU3NELEdBTUMsQ0FBQ0osRUFBV0MsR0FBa0JDLFFBSnJDRyxNQUFNLHFDQU9WLGFBQ0pwRSxLQUFLd0Qsa0JBQWtCNUUsTUFBUSxHQUMvQm9CLEtBQUswRCx3QkFBd0I5RSxNQUFRLEdBQ3JDb0IsS0FBSzJELG1CQUFtQi9FLE1BQU8sR0FHM0IsY0FBY3lGLEdBQ2xCQSxFQUFNQyxpQkFDTixNQUFNQyxFQUFZdkUsS0FBS3dFLGtCQUN2QixHQUFHQyxNQUFNQyxRQUFRSCxHQUFXLENBQ3hCLE1BQU92QyxFQUFNMkMsRUFBUXpDLEdBQVNxQyxFQUM5QmpCLEVBQWFzQixXQUFXNUMsRUFBTTJDLEVBQVF6QyxHQUV0Q2xDLEtBQUs2RSxlQVBiLEdBRENyRCxHLDRXQ3ZERyxNQUFNLFVBQW9CN0IsRUFXaEMsWUFBWW1GLEVBQWN0QyxHQUN0QkQsTUFBTSxpQkFBaUJ1QyxHQUFPLEVBQU10QyxFQUFTL0IsSUFDN0NULEtBQUtrRCxRQUFVVixFQUNmeEMsS0FBSzRELFlBQ0w1RCxLQUFLK0UsZ0JBWlQsY0FDRyxPQUEyQixJQUF4Qi9FLEtBQUtrRCxRQUFRaEIsT0FDTCxXQUdHbEMsS0FBS2tELFFBQVFoQixPQUFoQixXQVVkLGlCQUFpQm1DLEdBQ2RBLEVBQU1XLGFBQWNDLFFBQVEsYUFBYWpGLEtBQUtrRCxRQUFRekMsSUFDdEQ0RCxFQUFNVyxhQUFjRSxjQUFnQixPQUV2QyxlQUFlekQsR0FDWjBELFFBQVFDLElBQUksV0FFZixZQUNJcEYsS0FBS08sUUFBUXNELGlCQUFpQixZQUFZN0QsS0FBS3FGLGtCQUMvQ3JGLEtBQUtPLFFBQVFzRCxpQkFBaUIsVUFBVTdELEtBQUtzRixnQkFFakQsZ0JBQ0l0RixLQUFLTyxRQUFRa0QsY0FBYyxNQUFPOEIsWUFBY3ZGLEtBQUtrRCxRQUFRbEIsTUFDN0RoQyxLQUFLTyxRQUFRa0QsY0FBYyxNQUFPOEIsWUFBY3ZGLEtBQUt3RixRQUFTLFlBQzlEeEYsS0FBS08sUUFBUWtELGNBQWMsS0FBTThCLFlBQWN2RixLQUFLa0QsUUFBUWpCLGFBZGhFLEdBRENULEcsK1dDZEksTUFBTSxVQUFvQjdCLEVBSWpDLFlBQW9COEYsR0FDaEJsRCxNQUFNLGVBQWUsT0FBTSxFQUFTa0QsRUFBSCxhQURqQixLQUFBQSxPQUVoQnpGLEtBQUswRixnQkFBa0IsR0FFdkIxRixLQUFLNEQsWUFDTDVELEtBQUsrRSxnQkFHVCxnQkFBZ0JWLEdBQ1osR0FBR0EsRUFBTVcsY0FBK0MsZUFBL0JYLEVBQU1XLGFBQWFXLE1BQU0sR0FBbUIsQ0FDakV0QixFQUFNQyxpQkFDU3RFLEtBQUtPLFFBQVFrRCxjQUFjLE1BQ25DbUMsVUFBVUMsSUFBSSxjQUs3QixZQUFZeEIsR0FDUixNQUFNeUIsRUFBUXpCLEVBQU1XLGFBQWNlLFFBQVEsY0FDMUN6QyxFQUFhMEMsWUFBWUYsRUFBb0IsV0FBZDlGLEtBQUt5RixLQUFtQjNELEVBQWNnQixPQUFRaEIsRUFBY21FLFVBRy9GLGlCQUFpQnhFLEdBQ0V6QixLQUFLTyxRQUFRa0QsY0FBYyxNQUNuQ21DLFVBQVVNLE9BQU8sYUFFNUIsWUFDSWxHLEtBQUtPLFFBQVFzRCxpQkFBaUIsV0FBVzdELEtBQUttRyxpQkFDOUNuRyxLQUFLTyxRQUFRc0QsaUJBQWlCLFlBQVk3RCxLQUFLb0csa0JBQy9DcEcsS0FBS08sUUFBUXNELGlCQUFpQixPQUFPN0QsS0FBS3FHLGFBQzFDL0MsRUFBYWdELFlBQWE5RCxJQUN0QixNQUFNK0QsRUFBa0IvRCxFQUFTZ0UsT0FBT3BELEdBQ3BCLFdBQWJwRCxLQUFLeUYsS0FDR3JDLEVBQUlqQixTQUFVTCxFQUFjZ0IsT0FFaENNLEVBQUlqQixTQUFVTCxFQUFjbUUsVUFFdkNqRyxLQUFLMEYsZ0JBQWtCYSxFQUN2QnZHLEtBQUt5RyxtQkFHYixnQkFDSSxNQUFNQyxFQUFZMUcsS0FBS3lGLEtBQVIsaUJBQ2Z6RixLQUFLTyxRQUFRa0QsY0FBYyxNQUFPaEQsR0FBS2lHLEVBQ3ZDMUcsS0FBS08sUUFBUWtELGNBQWMsTUFBTzhCLFlBQWN2RixLQUFLeUYsS0FBS2tCLGNBQWMsWUFHcEUsaUJBQ1d6RyxTQUFTQyxlQUFrQkgsS0FBS3lGLEtBQVIsa0JBQ2hDbUIsVUFBWSxHQUNuQixJQUFJLE1BQU1DLEtBQVk3RyxLQUFLMEYsZ0JBQ3ZCLElBQUksRUFBWTFGLEtBQUtPLFFBQVFrRCxjQUFjLE1BQU9oRCxHQUFHb0csSUEzQzdELEdBRENyRixHLG9DQVVELEdBRENBLEcsZ0NBTUQsR0FEQ0EsRyxxQ0M5QmdCLElBQUksRUFDSyxJQUFJLEVBQVksVUFDZCxJQUFJLEVBQVkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLy9Db21wb25lbnQgQmFzZSBDbGFzc1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudDxUIGV4dGVuZHMgSFRNTEVsZW1lbnQsVSBleHRlbmRzIEhUTUxFbGVtZW50PntcclxuICAgIHRlbXBsYXRlRWxlbWVudDogSFRNTFRlbXBsYXRlRWxlbWVudDtcclxuICAgIGhvc3RFbGVtZW50OiBUO1xyXG4gICAgZWxlbWVudCA6IFU7XHJcblxyXG4gICAgY29uc3RydWN0b3IodGVtcGxhdGVJZDogc3RyaW5nLFxyXG4gICAgICAgIGhvc3RFbGVtZW50SWQ6IHN0cmluZywgXHJcbiAgICAgICAgXHJcbiAgICAgICAgaW5zZXJ0QXRTdGFydDogYm9vbGVhbixcclxuICAgICAgICBuZXdFbGVtZW50SWQ/OiBzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVFbGVtZW50ID0gPEhUTUxUZW1wbGF0ZUVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGVJZCkhO1xyXG4gICAgICAgIHRoaXMuaG9zdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChob3N0RWxlbWVudElkKSEgYXMgVDtcclxuXHJcbiAgICAgICAgY29uc3QgaW1wb3J0Tm9kZSA9IGRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZUVsZW1lbnQuY29udGVudCx0cnVlKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBpbXBvcnROb2RlLmZpcnN0RWxlbWVudENoaWxkIGFzIFU7XHJcbiAgICAgICAgaWYobmV3RWxlbWVudElkKXtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmlkID0gbmV3RWxlbWVudElkO1xyXG4gICAgICAgIH0gIFxyXG4gICAgICAgIHRoaXMuYXR0YWNoKGluc2VydEF0U3RhcnQpOyAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhdHRhY2goaW5zZXJ0QXRCZWdpbm5pbmc6IGJvb2xlYW4pe1xyXG4gICAgICAgIHRoaXMuaG9zdEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KGluc2VydEF0QmVnaW5uaW5nPydhZnRlcmJlZ2luJzonYmVmb3JlZW5kJyx0aGlzLmVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFic3RyYWN0IGNvbmZpZ3VyZT8oKTp2b2lkO1xyXG4gICAgYWJzdHJhY3QgcmVuZGVyQ29udGVudCgpOiB2b2lkO1xyXG59XHJcbiIsIiAvL1ZhbGlkYXRpb25cclxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0YWJsZSB7XHJcbiAgICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xyXG4gICAgcmVxdWlyZWQ/OiBib29sZWFuO1xyXG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xyXG4gICAgbWF4TGVuZ3RoPzogbnVtYmVyO1xyXG4gICAgbWluPzogbnVtYmVyO1xyXG4gICAgbWF4PzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUodmFsaWRhdGFibGVJbnB1dCA6IFZhbGlkYXRhYmxlKXtcclxuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcclxuICAgIGlmKHZhbGlkYXRhYmxlSW5wdXQucmVxdWlyZWQpe1xyXG4gICAgICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoICE9PTA7XHJcbiAgICB9XHJcbiAgICBpZih2YWxpZGF0YWJsZUlucHV0Lm1pbkxlbmd0aCAhPSBudWxsICYmIHR5cGVvZiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID09PSdzdHJpbmcnKXtcclxuICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlLmxlbmd0aCA+PSB2YWxpZGF0YWJsZUlucHV0Lm1pbkxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmKHZhbGlkYXRhYmxlSW5wdXQubWF4TGVuZ3RoICE9IG51bGwgJiYgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09J3N0cmluZycpe1xyXG4gICAgICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUubGVuZ3RoIDw9IHZhbGlkYXRhYmxlSW5wdXQubWF4TGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgaWYodmFsaWRhdGFibGVJbnB1dC5taW4gIT1udWxsICYmIHR5cGVvZiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID09PSdudW1iZXInKXtcclxuICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID49IHZhbGlkYXRhYmxlSW5wdXQubWluO1xyXG4gICAgfVxyXG4gICAgaWYodmFsaWRhdGFibGVJbnB1dC5tYXggIT1udWxsICYmIHR5cGVvZiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID09PSdudW1iZXInKXtcclxuICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlIDw9IHZhbGlkYXRhYmxlSW5wdXQubWF4O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzVmFsaWQ7XHJcbn0iLCIgIC8vIEF1dG9iaW5kIGRlY29yYXRvclxyXG5leHBvcnQgZnVuY3Rpb24gYXV0b2JpbmQoXzphbnksXzI6c3RyaW5nLGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcil7XHJcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICBjb25zdCBhZGpEZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGdldCgpe1xyXG4gICAgICAgICAgICBjb25zdCBib3VuZEZuID0gb3JpZ2luYWxNZXRob2QuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJvdW5kRm47XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhZGpEZXNjcmlwdG9yO1xyXG59IiwiIC8vIFByb2plY3QgVHlwZVxyXG5leHBvcnQgZW51bSBQcm9qZWN0U3RhdHVzIHsgQWN0aXZlLEZpbmlzaGVkfTtcclxuZXhwb3J0IGNsYXNzIFByb2plY3RUeXBle1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGlkOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIHRpdGxlOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIGRlc2NyaXB0aW9uOnN0cmluZyxcclxuICAgICAgICBwdWJsaWMgcGVvcGxlOiBudW1iZXIsXHJcbiAgICAgICAgcHVibGljIHN0YXR1czogUHJvamVjdFN0YXR1cyl7XHJcblxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUHJvamVjdFR5cGUsIFByb2plY3RTdGF0dXMgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcclxuXHJcbi8vIFByb2plY3QgU3RhdGUgTWFuYWdlbWVudFxyXG4gIHR5cGUgTGlzdG5lcjxUPiA9IChpdGVtOiBQcm9qZWN0VHlwZVtdKT0+dm9pZDtcclxuXHJcbiAgY2xhc3MgU3RhdGU8VD4ge1xyXG4gICAgICBwcm90ZWN0ZWQgbGlzdG5lcnM6IExpc3RuZXI8VD5bXSA9IFtdO1xyXG4gICAgICBhZGRMaXN0bmVycyhsaXN0bmVyc0ZuOiBMaXN0bmVyPFQ+KXtcclxuICAgICAgICAgIHRoaXMubGlzdG5lcnMucHVzaChsaXN0bmVyc0ZuKTtcclxuICAgICAgfVxyXG4gIH1cclxuICBcclxuICBleHBvcnQgY2xhc3MgUHJvamVjdFN0YXRlIGV4dGVuZHMgU3RhdGU8UHJvamVjdFR5cGU+e1xyXG4gICAgIFxyXG4gICAgICBwcml2YXRlIHByb2plY3RzOiBQcm9qZWN0VHlwZVtdID0gW107XHJcbiAgICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlIDogUHJvamVjdFN0YXRlO1xyXG4gICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICB9XHJcbiAgICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpe1xyXG4gICAgICAgICAgaWYodGhpcy5pbnN0YW5jZSl7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFByb2plY3RTdGF0ZSgpO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgIH1cclxuICAgICBcclxuICAgICAgYWRkUHJvamVjdCh0aXRsZTogc3RyaW5nLGRlc2NyaXB0aW9uOiBzdHJpbmcsIG51bVBlb3BsZTogbnVtYmVyKXtcclxuICAgICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdFR5cGUoXHJcbiAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgIG51bVBlb3BsZSxcclxuICAgICAgICAgICAgICBQcm9qZWN0U3RhdHVzLkFjdGl2ZVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHRoaXMucHJvamVjdHMucHVzaChuZXdQcm9qZWN0KTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlTGlzdG5lcnMoKTtcclxuICAgICAgfVxyXG4gICAgICBtb3ZlUHJvamVjdChwcm9qZWN0SWQ6IHN0cmluZywgbmV3U3RhdHVzOiBQcm9qZWN0U3RhdHVzKXtcclxuICAgICAgICAgIGNvbnN0IHByb2plY3QgPSB0aGlzLnByb2plY3RzLmZpbmQocHJqID0+cHJqLmlkID09PSBwcm9qZWN0SWQpO1xyXG4gICAgICAgICAgaWYocHJvamVjdCAmJiBwcm9qZWN0LnN0YXR1cyAhPT0gbmV3U3RhdHVzKXtcclxuICAgICAgICAgICAgICBwcm9qZWN0LnN0YXR1cyA9IG5ld1N0YXR1cztcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxpc3RuZXJzKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcHJpdmF0ZSB1cGRhdGVMaXN0bmVycygpe1xyXG4gICAgICAgICAgZm9yKGNvbnN0IGxpc3RuZXJzRm4gb2YgdGhpcy5saXN0bmVycyl7XHJcbiAgICAgICAgICAgICAgbGlzdG5lcnNGbih0aGlzLnByb2plY3RzLnNsaWNlKCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBjb25zdCBwcm9qZWN0U3RhdGUgPSBQcm9qZWN0U3RhdGUuZ2V0SW5zdGFuY2UoKTsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL2Jhc2UtY29tcG9uZW50JztcclxuaW1wb3J0IHsgVmFsaWRhdGFibGUsdmFsaWRhdGUgfSAgZnJvbSAnLi4vdXRpbC92YWxpZGF0aW9uJztcclxuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICcuLi9kZWNvcmF0b3IvYXV0b2JpbmQnO1xyXG5pbXBvcnQgeyBQcm9qZWN0U3RhdGUscHJvamVjdFN0YXRlIH0gZnJvbSAnLi4vc3RhdGUvcHJvamVjdC1zdGF0ZSc7XHJcbi8vUHJvamVjdElucHV0IENsYXNzXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0SW5wdXQgZXh0ZW5kcyBDb21wb25lbnQ8SFRNTERpdkVsZW1lbnQsSFRNTEZvcm1FbGVtZW50PnsgIFxyXG4gICAgdGl0bGVJbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBkZXNjcmlwdGlvbklucHV0RWxlbWVudDogSFRNTFRleHRBcmVhRWxlbWVudDtcclxuICAgIHBlcG9sZUlucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKCdwcm9qZWN0LWlucHV0JywnYXBwJyx0cnVlLCd1c2VyLWlucHV0Jyk7XHJcblxyXG4gICAgICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignI3RpdGxlJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXRFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkZXNjcmlwdGlvbicpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5wZXBvbGVJbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignI3Blb3BsZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcclxuICAgIH1cclxuICAgIGNvbmZpZ3VyZSgpe1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLHRoaXMuc3VibWl0SGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIHJlbmRlckNvbnRlbnQoKXt9XHJcbiAgICBwcml2YXRlIGdhdGhlclVzZXJJbnB1dCgpOiBbc3RyaW5nLHN0cmluZyxudW1iZXJdIHwgdm9pZHtcclxuICAgICAgICBjb25zdCBlbnRlclRpdGxlID0gdGhpcy50aXRsZUlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICBjb25zdCBlbnRlckRlc2NyaXB0aW9uID0gdGhpcy5kZXNjcmlwdGlvbklucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICBjb25zdCBlbnRlclBlb3BsZSA9IHRoaXMucGVwb2xlSW5wdXRFbGVtZW50LnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHRpdGxlVmFsaWRhdGFibGUgOiBWYWxpZGF0YWJsZSA9IHtcclxuICAgICAgICAgICAgdmFsdWU6IGVudGVyVGl0bGUsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICBtaW5MZW5ndGg6IDFcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uVmFsaWRhdGFibGUgOiBWYWxpZGF0YWJsZSA9e1xyXG4gICAgICAgICAgICB2YWx1ZTogZW50ZXJEZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIG1pbkxlbmd0aDogNVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGVvcGxlVmFsaWRhdGFibGU6IFZhbGlkYXRhYmxlID0ge1xyXG4gICAgICAgICAgICB2YWx1ZSA6IGVudGVyUGVvcGxlLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgbWluTGVuZ3RoOiAxLFxyXG4gICAgICAgICAgICBtaW46IDEsXHJcbiAgICAgICAgICAgIG1heDogNVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihcclxuICAgICAgICAgICAgIXZhbGlkYXRlKHRpdGxlVmFsaWRhdGFibGUpIHx8XHJcbiAgICAgICAgICAgICF2YWxpZGF0ZShkZXNjcmlwdGlvblZhbGlkYXRhYmxlKSB8fFxyXG4gICAgICAgICAgICAhdmFsaWRhdGUocGVvcGxlVmFsaWRhdGFibGUpIFxyXG4gICAgICAgICl7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnSW52YWxpZCBpbnB1dCwgcGxlYXNlIHRyeSBhZ2lhbi4uJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZW50ZXJUaXRsZSxlbnRlckRlc2NyaXB0aW9uLCtlbnRlclBlb3BsZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgY2xlYXJJbnB1dCgpe1xyXG4gICAgICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQudmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXRFbGVtZW50LnZhbHVlID0gJyc7XHJcbiAgICAgICAgdGhpcy5wZXBvbGVJbnB1dEVsZW1lbnQudmFsdWUgPScnO1xyXG4gICAgfVxyXG4gICAgQGF1dG9iaW5kXHJcbiAgICBwcml2YXRlIHN1Ym1pdEhhbmRsZXIoZXZlbnQ6IEV2ZW50KXtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IHRoaXMuZ2F0aGVyVXNlcklucHV0KCk7XHJcbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh1c2VySW5wdXQpKXtcclxuICAgICAgICAgICAgY29uc3QgW3RpdGxlLGRlc2NyaXAscGVvcGxlXT0gdXNlcklucHV0O1xyXG4gICAgICAgICAgICBwcm9qZWN0U3RhdGUuYWRkUHJvamVjdCh0aXRsZSxkZXNjcmlwLHBlb3BsZSk7XHJcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2codGl0bGUsZGVzY3JpcCxwZW9wbGUpO1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFySW5wdXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRHJhZ2FibGUgfSBmcm9tICcuLi9tb2RlbHMvZHJhZy1kcm9wJztcclxuaW1wb3J0IHsgUHJvamVjdFR5cGUgfSBmcm9tICcuLi9tb2RlbHMvcHJvamVjdCc7XHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vYmFzZS1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJy4uL2RlY29yYXRvci9hdXRvYmluZCc7XHJcblxyXG4vL1Byb2plY3QgSXRlbSBDbGFzc1xyXG4gZXhwb3J0IGNsYXNzIFByb2plY3RJdGVtIGV4dGVuZHMgQ29tcG9uZW50PEhUTUxVTGlzdEVsZW1lbnQsSFRNTExJRWxlbWVudD5cclxuIGltcGxlbWVudHMgRHJhZ2FibGV7XHJcbiAgcHJpdmF0ZSBwcm9qZWN0IDogUHJvamVjdFR5cGU7XHJcbiAgZ2V0IHBlcnNvbnMoKXtcclxuICAgICBpZih0aGlzLnByb2plY3QucGVvcGxlID09PSAxKXtcclxuICAgICAgICAgcmV0dXJuICcxIFBlcnNvbic7XHJcbiAgICAgfVxyXG4gICAgIGVsc2V7XHJcbiAgICAgICAgIHJldHVybiBgJHt0aGlzLnByb2plY3QucGVvcGxlfSBwZXJzb25zYDsgXHJcbiAgICAgfVxyXG4gIH1cclxuICBjb25zdHJ1Y3Rvcihob3N0SWQ6c3RyaW5nLHByb2plY3RzOlByb2plY3RUeXBlKXtcclxuICAgICAgc3VwZXIoJ3NpbmdsZS1wcm9qZWN0Jyxob3N0SWQsZmFsc2UscHJvamVjdHMuaWQpO1xyXG4gICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0cztcclxuICAgICAgdGhpcy5jb25maWd1cmUoKTtcclxuICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XHJcbiAgfVxyXG4gIEBhdXRvYmluZFxyXG4gIGRyYWdTdGFydEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCl7XHJcbiAgICAgZXZlbnQuZGF0YVRyYW5zZmVyIS5zZXREYXRhKCd0ZXh0L3BsYWluJyx0aGlzLnByb2plY3QuaWQpO1xyXG4gICAgIGV2ZW50LmRhdGFUcmFuc2ZlciEuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiO1xyXG4gIH1cclxuICBkcmFnRW5kSGFuZGxlcihfOkRyYWdFdmVudCl7XHJcbiAgICAgY29uc29sZS5sb2coJ0RyYWdFbmQnKTtcclxuICB9XHJcbiAgY29uZmlndXJlKCl7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLHRoaXMuZHJhZ1N0YXJ0SGFuZGxlcik7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJyx0aGlzLmRyYWdFbmRIYW5kbGVyKTtcclxuICB9XHJcbiAgcmVuZGVyQ29udGVudCgpe1xyXG4gICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignaDInKSEudGV4dENvbnRlbnQgPSB0aGlzLnByb2plY3QudGl0bGU7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdoMycpIS50ZXh0Q29udGVudCA9IHRoaXMucGVyc29ucyArJyBhc3NpZ25lZCc7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdwJykhLnRleHRDb250ZW50ID0gdGhpcy5wcm9qZWN0LmRlc2NyaXB0aW9uO1xyXG4gIH1cclxufVxyXG4iLCIgIC8vUHJvamVjdExpc3QgQ2xhc3NcclxuXHJcbmltcG9ydCB7IFByb2plY3RJdGVtIH0gZnJvbSBcIi4vcHJvamVjdC1pdGVtXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL2Jhc2UtY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IERyYWdUYXJnZXQgfSBmcm9tIFwiLi4vbW9kZWxzL2RyYWctZHJvcFwiO1xyXG5pbXBvcnQgeyBQcm9qZWN0VHlwZSwgUHJvamVjdFN0YXR1cyB9IGZyb20gXCIuLi9tb2RlbHMvcHJvamVjdFwiO1xyXG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gXCIuLi9kZWNvcmF0b3IvYXV0b2JpbmRcIjtcclxuaW1wb3J0IHsgcHJvamVjdFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlL3Byb2plY3Qtc3RhdGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0TGlzdCBleHRlbmRzIENvbXBvbmVudDxIVE1MRGl2RWxlbWVudCxIVE1MRWxlbWVudD5cclxuaW1wbGVtZW50cyBEcmFnVGFyZ2V0e1xyXG5hc3NpZ25lZFByb2plY3QgOiBQcm9qZWN0VHlwZVtdO1xyXG5cclxuY29uc3RydWN0b3IocHJpdmF0ZSB0eXBlOiAnYWN0aXZlJyB8ICdmaW5pc2hlZCcpe1xyXG4gICAgc3VwZXIoJ3Byb2plY3QtbGlzdCcsJ2FwcCcsZmFsc2UsYCR7dHlwZX0tcHJvamVjdHNgKTtcclxuICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0ID0gW107XHJcbiAgICBcclxuICAgIHRoaXMuY29uZmlndXJlKCk7XHJcbiAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxufVxyXG5AYXV0b2JpbmRcclxuZHJhZ092ZXJIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpe1xyXG4gICAgaWYoZXZlbnQuZGF0YVRyYW5zZmVyICYmIGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PT0ndGV4dC9wbGFpbicpe1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhO1xyXG4gICAgICAgIGxpc3RFbC5jbGFzc0xpc3QuYWRkKCdkcm9wcGFibGUnKVxyXG4gICAgfVxyXG4gICBcclxufVxyXG5AYXV0b2JpbmRcclxuZHJvcEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCl7XHJcbiAgICBjb25zdCBwcmpJZCA9IGV2ZW50LmRhdGFUcmFuc2ZlciEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xyXG4gICAgcHJvamVjdFN0YXRlLm1vdmVQcm9qZWN0KHByaklkLHRoaXMudHlwZSA9PT0gJ2FjdGl2ZSc/IFByb2plY3RTdGF0dXMuQWN0aXZlOiBQcm9qZWN0U3RhdHVzLkZpbmlzaGVkKTtcclxufVxyXG5AYXV0b2JpbmRcclxuZHJhZ0xlYXZlSGFuZGxlcihfOiBEcmFnRXZlbnQpe1xyXG4gICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhO1xyXG4gICAgbGlzdEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Ryb3BwYWJsZScpXHJcbn1cclxuY29uZmlndXJlKCl7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLHRoaXMuZHJhZ092ZXJIYW5kbGVyKTtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLHRoaXMuZHJhZ0xlYXZlSGFuZGxlcik7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsdGhpcy5kcm9wSGFuZGxlcik7XHJcbiAgICBwcm9qZWN0U3RhdGUuYWRkTGlzdG5lcnMoKHByb2plY3RzOiBQcm9qZWN0VHlwZVtdKT0+e1xyXG4gICAgICAgIGNvbnN0IHJlbGV2YW50UHJvamVjdCA9IHByb2plY3RzLmZpbHRlcihwcmogPT4ge1xyXG4gICAgICAgICAgICBpZih0aGlzLnR5cGUgPT09J2FjdGl2ZScpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByai5zdGF0dXMgPT09UHJvamVjdFN0YXR1cy5BY3RpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByai5zdGF0dXMgPT09UHJvamVjdFN0YXR1cy5GaW5pc2hlZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFzc2lnbmVkUHJvamVjdCA9IHJlbGV2YW50UHJvamVjdDtcclxuICAgICAgICB0aGlzLnJlbmRlclByb2plY3RzKCk7XHJcbiAgICB9KTtcclxufVxyXG5yZW5kZXJDb250ZW50KCl7XHJcbiAgICBjb25zdCBsaXN0SWQgPSBgJHt0aGlzLnR5cGV9LXByb2plY3RzLWxpc3RgO1xyXG4gICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3VsJykhLmlkID0gbGlzdElkO1xyXG4gICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2gyJykhLnRleHRDb250ZW50ID0gdGhpcy50eXBlLnRvVXBwZXJDYXNlKCkrJyBQUk9KRUNUUyc7XHJcbn1cclxuXHJcbnByaXZhdGUgcmVuZGVyUHJvamVjdHMoKXtcclxuICAgIGNvbnN0IGxpc3RFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3RoaXMudHlwZX0tcHJvamVjdHMtbGlzdGApIGFzIEhUTUxVTGlzdEVsZW1lbnQ7XHJcbiAgICBsaXN0RWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBmb3IoY29uc3QgcHJvakl0ZW0gb2YgdGhpcy5hc3NpZ25lZFByb2plY3Qpe1xyXG4gICAgICAgIG5ldyBQcm9qZWN0SXRlbSh0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcigndWwnKSEuaWQscHJvakl0ZW0pO1xyXG4gICAgfVxyXG59XHJcbn0iLCJpbXBvcnQgeyBQcm9qZWN0SW5wdXQgfSBmcm9tIFwiLi9jb21wb25lbnQvcHJvamVjdC1pbnB1dFwiO1xyXG5pbXBvcnQgeyBQcm9qZWN0TGlzdCB9IGZyb20gXCIuL2NvbXBvbmVudC9wcm9qZWN0LWxpc3RcIjtcclxuXHJcblxyXG5jb25zdCBwcmpJbnB1dCA9IG5ldyBQcm9qZWN0SW5wdXQoKTtcclxuY29uc3QgYWN0aXZlUHJvamVjdExpc3QgPSBuZXcgUHJvamVjdExpc3QoJ2FjdGl2ZScpO1xyXG5jb25zdCBmaW5pc2hlZFByb2plY3RMaXN0ID0gbmV3IFByb2plY3RMaXN0KCdmaW5pc2hlZCcpO1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==